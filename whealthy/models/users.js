const mongoose = require("mongoose"),
  Schema = mongoose.Schema;

const User = new Schema({
  mobileNumber: String,
  email: {
    type: String,
  },
  uniqueID: {
    type: String,
    unique: true
  },
  registrationNumber: String,
  registrationCouncil: String,
  registrationYear: Number,
  franchiseeName: String,
  designation: {
    type: String,
    enum: [
      "Admin",
      "User",
      "Doctor",
      "Hospital",
      "DeliveryBoy",
      "Clinic",
      "Vendor",
      "Franchisee",
    ],
    required: true,
  },
  isVerified: {
    type: String,
    // enum: ["No", "Yes", "InVerification"],
    default: "No",
    // required: true,
  },
  loginType: {
    type: String,
    enum: ["Google", "Facebook", "Password", "OTP"],
    default: "Password",
    // required: true,
  },
  isMobileVerified: {
    type: String,
    enum: ["Not", "Verified"],
    default: "Not",
    // required: true,
  },
  isEmailVerified: {
    type: String,
    enum: ["Not", "Verified"],
    default: "Not",
    // required: true,
  },
  doctorType: {
    type: String,
    // enum: ["Primary", "nonPrimary"],
    // default: "nonPrimary",
    // required: true,
  },
  isOnline: {
    type: Boolean,
    enum: [true, false],
    default: false,
    // required: true,
  },
  prefix: String,
  specialitie: Array,
  encryptedEmail: String,
  deviceToken: String,
  platform: String,
  title: String,
  address:String,
  adhar:Number,
  firstName: String,
  middleName: String,
  lastName: String,
  otp: Number,
  otpExpires: Date,
  dob: String,
  gender: String,
  avatar:String,
  password: String,
  extraPhoneNumber: String,
  language: Array,
  bloodGroup: String,
  timeZone: String,
  degree: String,
  landmark:String,
  experience: String,
  membership: String,
  socialId: String,
  college: String,
  description: String,
  commission:String,
  country:String,
  city:String,
  pincode:Number,
  state:String,
  franchiseName:String,
  identityFile: Array,
  proffession: String,
  registrationProff: String,
  establishmentProff: String,
  clinicInfo: Array,
  consultationFee: String,
  qualification: Array,
  yearsOfexperience: String,
  consultation: String,
  isActivate: {
    type: String,
    enum: ["Active", "Deactive"],
    default: "Active",
  },
  slot: Array,
  yearOfCompletion: Number,
  clinicId: {
    type: mongoose.Types.ObjectId,
    ref: "Clinic",
  },
  locationId: {
    type: mongoose.Types.ObjectId,
    ref: "Location",
  },
  fees: Number,
  establishmentHour: String,
  hours: String,
  treatment: Array,
  practiceSince: String,
  amenities: String,
  clinicName: Array,
  clinicType: String,
  complementry: String,
  healthCareService: String,
  legalName: String,
  nameOfContactPerson: String,
  systemOfMedicine: String,
  website: String,
  designationPerson: String,
  typeOfEstablishment: {
    type: String,
    default: "VisitEstablishment",
  },
  location: {
    address: String,
    landmark: String,
    state: String,
    city: String,
    pincode:Number,
    country: String,
    countryName: String,
    stateName: String,
    cityName: String,
    countryNameP: String,
    stateNameP: String,
    cityNameP: String,
    countryP:String,
    stateP:String,
    cityP:String,
    landmarkP:String,
    addressP:String,
    pincodeP:Number,
    lat: String,
    lng: String,
  },
  onlineStatus: {
    type: Boolean
  },
  status: {
    type: String,
    default: "active",
  },
}, {
  timestamps: true,
});
module.exports = mongoose.model("User", User);